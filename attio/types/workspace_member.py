# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic as pydantic

from ..core.datetime_utils import serialize_datetime
from .workspace_member_access_level import WorkspaceMemberAccessLevel
from .workspace_member_id import WorkspaceMemberId


class WorkspaceMember(pydantic.BaseModel):
    id: WorkspaceMemberId
    first_name: str = pydantic.Field(description="The first name of the user.")
    last_name: str = pydantic.Field(description="The last name of the user.")
    avatar_url: typing.Optional[str] = pydantic.Field(description="A URL to the user's avatar image.")
    email_address: str = pydantic.Field(description="The user's email address.")
    created_at: str = pydantic.Field(description="When the workspace member was created.")
    access_level: WorkspaceMemberAccessLevel = pydantic.Field(
        description="Whether the workspace member is suspended or not and what level of privileges they have inside the workspace. We do not delete workspace members so that you can successfully attribute past actions to suspended workspace members."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        
        json_encoders = {dt.datetime: serialize_datetime}
