# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.bad_request_error import BadRequestError
from ...errors.not_found_error import NotFoundError
from .types.delete_v_2_tasks_task_id_response import DeleteV2TasksTaskIdResponse
from .types.get_v_2_tasks_response import GetV2TasksResponse
from .types.get_v_2_tasks_task_id_response import GetV2TasksTaskIdResponse
from .types.post_v_2_tasks_request_data import PostV2TasksRequestData
from .types.post_v_2_tasks_response import PostV2TasksResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TasksClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_tasks(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        linked_object: typing.Optional[str] = None,
        linked_record_id: typing.Optional[str] = None,
        assignee: typing.Optional[str] = None,
        is_completed: typing.Optional[bool] = None,
    ) -> GetV2TasksResponse:
        """
        List all tasks. Results are sorted by creation date, from oldest to newest.

        Required scopes: `task:read`, `object_configuration:read`, `record_permission:read`, `user_management:read`.

        Parameters:
            - limit: typing.Optional[int].

            - offset: typing.Optional[int].

            - linked_object: typing.Optional[str].

            - linked_record_id: typing.Optional[str].

            - assignee: typing.Optional[str].

            - is_completed: typing.Optional[bool].
        ---
        from attio.client import attio_api

        client = attio_api(
            token="YOUR_TOKEN",
        )
        client.tasks.list_tasks(
            limit=1,
            offset=1,
            linked_object="people",
            linked_record_id="891dcbfc-9141-415d-9b2a-2238a6cc012d",
            is_completed=True,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/tasks"),
            params=remove_none_from_dict(
                {
                    "limit": limit,
                    "offset": offset,
                    "linked_object": linked_object,
                    "linked_record_id": linked_record_id,
                    "assignee": assignee,
                    "is_completed": is_completed,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetV2TasksResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_task(self, *, data: PostV2TasksRequestData) -> PostV2TasksResponse:
        """
        Creates a new task.

        At present, tasks can only be created from plaintext without record reference formatting.

        Required scopes: `task:read-write`, `object_configuration:read`, `record_permission:read`, `user_management:read`.

        Parameters:
            - data: PostV2TasksRequestData.
        ---
        from attio import PostV2TasksRequestData
        from attio.client import attio_api

        client = attio_api(
            token="YOUR_TOKEN",
        )
        client.tasks.create_a_task(
            data=PostV2TasksRequestData(
                content="Follow up on current software solutions",
                format="plaintext",
                deadline_at="2023-01-01T15:00:00.000000000Z",
                is_completed=False,
                linked_records=[],
                assignees=[],
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/tasks"),
            json=jsonable_encoder({"data": data}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PostV2TasksResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_a_task(self, task_id: str) -> GetV2TasksTaskIdResponse:
        """
        Get a single task by ID.

        Required scopes: `task:read`, `object_configuration:read`, `record_permission:read`, `user_management:read`.

        Parameters:
            - task_id: str.
        ---
        from attio.client import attio_api

        client = attio_api(
            token="YOUR_TOKEN",
        )
        client.tasks.get_a_task(
            task_id="649e34f4-c39a-4f4d-99ef-48a36bef8f04",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v2/tasks/{task_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetV2TasksTaskIdResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_a_task(self, task_id: str) -> DeleteV2TasksTaskIdResponse:
        """
        Delete a task by ID.

        Required scopes: `task:read-write`.

        Parameters:
            - task_id: str.
        ---
        from attio.client import attio_api

        client = attio_api(
            token="YOUR_TOKEN",
        )
        client.tasks.delete_a_task(
            task_id="649e34f4-c39a-4f4d-99ef-48a36bef8f04",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v2/tasks/{task_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DeleteV2TasksTaskIdResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTasksClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_tasks(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        linked_object: typing.Optional[str] = None,
        linked_record_id: typing.Optional[str] = None,
        assignee: typing.Optional[str] = None,
        is_completed: typing.Optional[bool] = None,
    ) -> GetV2TasksResponse:
        """
        List all tasks. Results are sorted by creation date, from oldest to newest.

        Required scopes: `task:read`, `object_configuration:read`, `record_permission:read`, `user_management:read`.

        Parameters:
            - limit: typing.Optional[int].

            - offset: typing.Optional[int].

            - linked_object: typing.Optional[str].

            - linked_record_id: typing.Optional[str].

            - assignee: typing.Optional[str].

            - is_completed: typing.Optional[bool].
        ---
        from attio.client import Asyncattio_api

        client = Asyncattio_api(
            token="YOUR_TOKEN",
        )
        await client.tasks.list_tasks(
            limit=1,
            offset=1,
            linked_object="people",
            linked_record_id="891dcbfc-9141-415d-9b2a-2238a6cc012d",
            is_completed=True,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/tasks"),
            params=remove_none_from_dict(
                {
                    "limit": limit,
                    "offset": offset,
                    "linked_object": linked_object,
                    "linked_record_id": linked_record_id,
                    "assignee": assignee,
                    "is_completed": is_completed,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetV2TasksResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_task(self, *, data: PostV2TasksRequestData) -> PostV2TasksResponse:
        """
        Creates a new task.

        At present, tasks can only be created from plaintext without record reference formatting.

        Required scopes: `task:read-write`, `object_configuration:read`, `record_permission:read`, `user_management:read`.

        Parameters:
            - data: PostV2TasksRequestData.
        ---
        from attio import PostV2TasksRequestData
        from attio.client import Asyncattio_api

        client = Asyncattio_api(
            token="YOUR_TOKEN",
        )
        await client.tasks.create_a_task(
            data=PostV2TasksRequestData(
                content="Follow up on current software solutions",
                format="plaintext",
                deadline_at="2023-01-01T15:00:00.000000000Z",
                is_completed=False,
                linked_records=[],
                assignees=[],
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/tasks"),
            json=jsonable_encoder({"data": data}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PostV2TasksResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_a_task(self, task_id: str) -> GetV2TasksTaskIdResponse:
        """
        Get a single task by ID.

        Required scopes: `task:read`, `object_configuration:read`, `record_permission:read`, `user_management:read`.

        Parameters:
            - task_id: str.
        ---
        from attio.client import Asyncattio_api

        client = Asyncattio_api(
            token="YOUR_TOKEN",
        )
        await client.tasks.get_a_task(
            task_id="649e34f4-c39a-4f4d-99ef-48a36bef8f04",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v2/tasks/{task_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetV2TasksTaskIdResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_a_task(self, task_id: str) -> DeleteV2TasksTaskIdResponse:
        """
        Delete a task by ID.

        Required scopes: `task:read-write`.

        Parameters:
            - task_id: str.
        ---
        from attio.client import Asyncattio_api

        client = Asyncattio_api(
            token="YOUR_TOKEN",
        )
        await client.tasks.delete_a_task(
            task_id="649e34f4-c39a-4f4d-99ef-48a36bef8f04",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v2/tasks/{task_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DeleteV2TasksTaskIdResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
