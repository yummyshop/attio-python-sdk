# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic as pydantic
import typing_extensions

from ..core.datetime_utils import serialize_datetime
from .output_value_currency_code_currency_code import OutputValueCurrencyCodeCurrencyCode


class OutputValueCurrencyCode(pydantic.BaseModel):
    currency_value: float = pydantic.Field(
        description="A numerical representation of the currency value. A decimal with a max of 4 decimal places."
    )
    currency_code: typing.Optional[OutputValueCurrencyCodeCurrencyCode] = pydantic.Field(
        description="The ISO4217 currency code representing the currency that the value is stored in."
    )
    attribute_type: typing_extensions.Literal["currency"]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        
        json_encoders = {dt.datetime: serialize_datetime}
