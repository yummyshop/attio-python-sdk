# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic as pydantic

from ..core.datetime_utils import serialize_datetime
from .object_id import ObjectId


class Object(pydantic.BaseModel):
    id: ObjectId
    api_slug: typing.Optional[str] = pydantic.Field(
        description="A unique, human-readable slug to access the object through URLs and API calls. Formatted in snake case."
    )
    singular_noun: typing.Optional[str] = pydantic.Field(description="The singular form of the object's name.")
    plural_noun: typing.Optional[str] = pydantic.Field(description="The plural form of the object's name.")
    created_at: str = pydantic.Field(description="When the object was created.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        
        json_encoders = {dt.datetime: serialize_datetime}
