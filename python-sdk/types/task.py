# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ..core.datetime_utils import serialize_datetime
from .task_assignees_item import TaskAssigneesItem
from .task_created_by_actor import TaskCreatedByActor
from .task_id import TaskId
from .task_linked_records_item import TaskLinkedRecordsItem


class Task(pydantic.BaseModel):
    id: TaskId
    content_plaintext: str = pydantic.Field(
        description='The plaintext representation of the task content. Inline linked records will appear as "@record name" and are returned in the `linked_records` property.'
    )
    deadline_at: typing.Optional[str] = pydantic.Field(
        description="The deadline date of the task. Returned as an ISO 8601 timestamp."
    )
    is_completed: bool = pydantic.Field(description="Whether the task has been completed.")
    linked_records: typing.List[TaskLinkedRecordsItem] = pydantic.Field(
        description="Records linked to the task. Creating record links within task content text is not possible via the API at present."
    )
    assignees: typing.List[TaskAssigneesItem] = pydantic.Field(description="Workspace members assigned to this task.")
    created_by_actor: TaskCreatedByActor = pydantic.Field(description="The actor that created this task.")
    created_at: str = pydantic.Field(description="When the task was created.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
