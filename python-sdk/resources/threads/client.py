# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.not_found_error import NotFoundError
from .types.get_v_2_threads_response import GetV2ThreadsResponse
from .types.get_v_2_threads_thread_id_response import GetV2ThreadsThreadIdResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ThreadsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_threads(
        self,
        *,
        record_id: typing.Optional[str] = None,
        object: typing.Optional[str] = None,
        entry_id: typing.Optional[str] = None,
        list: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
    ) -> GetV2ThreadsResponse:
        """
        List threads of comments on a record or list entry.

        To view threads on records, you will need the `object_configuration:read` and `record_permission:read` scopes.

        To view threads on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.

        Required scopes: `comment:read`.

        Parameters:
            - record_id: typing.Optional[str].

            - object: typing.Optional[str].

            - entry_id: typing.Optional[str].

            - list: typing.Optional[str].

            - limit: typing.Optional[int].

            - offset: typing.Optional[int].
        ---
        from attio.client import attio_api

        client = attio_api(
            token="YOUR_TOKEN",
        )
        client.threads.list_threads(
            record_id="891dcbfc-9141-415d-9b2a-2238a6cc012d",
            object="people",
            entry_id="2e6e29ea-c4e0-4f44-842d-78a891f8c156",
            list="33ebdbe9-e529-47c9-b894-0ba25e9c15c0",
            limit=1,
            offset=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/threads"),
            params=remove_none_from_dict(
                {
                    "record_id": record_id,
                    "object": object,
                    "entry_id": entry_id,
                    "list": list,
                    "limit": limit,
                    "offset": offset,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetV2ThreadsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_a_thread(self, thread_id: str) -> GetV2ThreadsThreadIdResponse:
        """
        Get all comments in a thread.

        To view threads on records, you will need the `object_configuration:read` and `record_permission:read` scopes.

        To view threads on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.

        Required scopes: `comment:read`.

        Parameters:
            - thread_id: str.
        ---
        from attio.client import attio_api

        client = attio_api(
            token="YOUR_TOKEN",
        )
        client.threads.get_a_thread(
            thread_id="a649e4d9-435c-43fb-83ba-847b4876f27a",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v2/threads/{thread_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetV2ThreadsThreadIdResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncThreadsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_threads(
        self,
        *,
        record_id: typing.Optional[str] = None,
        object: typing.Optional[str] = None,
        entry_id: typing.Optional[str] = None,
        list: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
    ) -> GetV2ThreadsResponse:
        """
        List threads of comments on a record or list entry.

        To view threads on records, you will need the `object_configuration:read` and `record_permission:read` scopes.

        To view threads on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.

        Required scopes: `comment:read`.

        Parameters:
            - record_id: typing.Optional[str].

            - object: typing.Optional[str].

            - entry_id: typing.Optional[str].

            - list: typing.Optional[str].

            - limit: typing.Optional[int].

            - offset: typing.Optional[int].
        ---
        from attio.client import Asyncattio_api

        client = Asyncattio_api(
            token="YOUR_TOKEN",
        )
        await client.threads.list_threads(
            record_id="891dcbfc-9141-415d-9b2a-2238a6cc012d",
            object="people",
            entry_id="2e6e29ea-c4e0-4f44-842d-78a891f8c156",
            list="33ebdbe9-e529-47c9-b894-0ba25e9c15c0",
            limit=1,
            offset=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/threads"),
            params=remove_none_from_dict(
                {
                    "record_id": record_id,
                    "object": object,
                    "entry_id": entry_id,
                    "list": list,
                    "limit": limit,
                    "offset": offset,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetV2ThreadsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_a_thread(self, thread_id: str) -> GetV2ThreadsThreadIdResponse:
        """
        Get all comments in a thread.

        To view threads on records, you will need the `object_configuration:read` and `record_permission:read` scopes.

        To view threads on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.

        Required scopes: `comment:read`.

        Parameters:
            - thread_id: str.
        ---
        from attio.client import Asyncattio_api

        client = Asyncattio_api(
            token="YOUR_TOKEN",
        )
        await client.threads.get_a_thread(
            thread_id="a649e4d9-435c-43fb-83ba-847b4876f27a",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v2/threads/{thread_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetV2ThreadsThreadIdResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
