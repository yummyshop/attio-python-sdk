# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic as pydantic
import typing_extensions

from ....core.datetime_utils import serialize_datetime
from .post_v_2_comments_request_data_thread_id_author import PostV2CommentsRequestDataThreadIdAuthor


class PostV2CommentsRequestDataThreadId(pydantic.BaseModel):
    format: typing_extensions.Literal["plaintext"]
    content: str = pydantic.Field(
        description="The content of the comment itself. Workspace members can be mentioned using their email address, otherwise email addresses will be presented to users as clickable mailto links."
    )
    author: PostV2CommentsRequestDataThreadIdAuthor = pydantic.Field(
        description="The workspace member who wrote this comment. Note that other types of actors are not currently supported."
    )
    created_at: typing.Optional[str] = pydantic.Field(
        description="`created_at` will default to the current time. However, if you wish to backdate a comment for migration or other purposes, you can override with a custom `created_at` value. Note that dates before 1970 or in the future are not allowed."
    )
    thread_id: str = pydantic.Field(
        description="If responding to an existing thread, this would be the ID of that thread."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
