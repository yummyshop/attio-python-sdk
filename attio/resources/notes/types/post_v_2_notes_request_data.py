# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic as pydantic
import typing_extensions

from ....core.datetime_utils import serialize_datetime


class PostV2NotesRequestData(pydantic.BaseModel):
    parent_object: str = pydantic.Field(description="The ID or slug of the parent object the note belongs to.")
    parent_record_id: str = pydantic.Field(description="The ID of the parent record the note belongs to.")
    title: str = pydantic.Field(description="The note title. The title is plaintext only and has no formatting.")
    format: typing_extensions.Literal["plaintext"]
    content: str = pydantic.Field(description="The representation of the note content in the specified format.")
    created_at: typing.Optional[str] = pydantic.Field(
        description="`created_at` will default to the current time. However, if you wish to backdate a note for migration or other purposes, you can override with a custom `created_at` value. Note that dates before 1970 or in the future are not allowed."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        
        json_encoders = {dt.datetime: serialize_datetime}
