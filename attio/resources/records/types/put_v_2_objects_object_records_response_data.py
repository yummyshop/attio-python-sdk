# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic as pydantic

from ....core.datetime_utils import serialize_datetime
from .put_v_2_objects_object_records_response_data_id import PutV2ObjectsObjectRecordsResponseDataId
from .put_v_2_objects_object_records_response_data_values_value_item import (
    PutV2ObjectsObjectRecordsResponseDataValuesValueItem,
)


class PutV2ObjectsObjectRecordsResponseData(pydantic.BaseModel):
    id: PutV2ObjectsObjectRecordsResponseDataId
    created_at: str = pydantic.Field(description="When this record was created.")
    values: typing.Dict[str, typing.List[PutV2ObjectsObjectRecordsResponseDataValuesValueItem]] = pydantic.Field(
        description="A record type with an attribute `api_slug` as the key, and an array of value objects as the values."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
