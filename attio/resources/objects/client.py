# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...errors.bad_request_error import BadRequestError
from ...errors.conflict_error import ConflictError
from ...errors.not_found_error import NotFoundError
from .types.get_v_2_objects_object_response import GetV2ObjectsObjectResponse
from .types.get_v_2_objects_response import GetV2ObjectsResponse
from .types.patch_v_2_objects_object_request_data import PatchV2ObjectsObjectRequestData
from .types.patch_v_2_objects_object_response import PatchV2ObjectsObjectResponse
from .types.post_v_2_objects_request_data import PostV2ObjectsRequestData
from .types.post_v_2_objects_response import PostV2ObjectsResponse

try:
    import pydantic as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ObjectsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_objects(self) -> GetV2ObjectsResponse:
        """
        Lists all system-defined and user-defined objects in your workspace.

        Required scopes: `object_configuration:read`.

        ---
        from attio.client import AttioClient

        client = AttioClient(
            token="YOUR_TOKEN",
        )
        client.objects.list_objects()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/objects"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetV2ObjectsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_an_object(self, *, data: PostV2ObjectsRequestData) -> PostV2ObjectsResponse:
        """
        Creates a new custom object in your workspace.

        Required scopes: `object_configuration:read-write`.

        Parameters:
            - data: PostV2ObjectsRequestData.
        ---
        from attio import PostV2ObjectsRequestData
        from attio.client import AttioClient

        client = AttioClient(
            token="YOUR_TOKEN",
        )
        client.objects.create_an_object(
            data=PostV2ObjectsRequestData(
                api_slug="people",
                singular_noun="Person",
                plural_noun="People",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/objects"),
            json=jsonable_encoder({"data": data}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PostV2ObjectsResponse, _response.json())  # type: ignore
        if _response.status_code == 409:
            raise ConflictError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_an_object(self, object: str) -> GetV2ObjectsObjectResponse:
        """
        Gets a single object by its `object_id` or slug.

        Required scopes: `object_configuration:read`.

        Parameters:
            - object: str.
        ---
        from attio.client import AttioClient

        client = AttioClient(
            token="YOUR_TOKEN",
        )
        client.objects.get_an_object(
            object="people",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v2/objects/{object}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetV2ObjectsObjectResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_an_object(self, object: str, *, data: PatchV2ObjectsObjectRequestData) -> PatchV2ObjectsObjectResponse:
        """
        Updates a single object. The object to be updated is identified by its `object_id`.

        Required scopes: `object_configuration:read-write`.

        Parameters:
            - object: str.

            - data: PatchV2ObjectsObjectRequestData.
        ---
        from attio import PatchV2ObjectsObjectRequestData
        from attio.client import AttioClient

        client = AttioClient(
            token="YOUR_TOKEN",
        )
        client.objects.update_an_object(
            object="people",
            data=PatchV2ObjectsObjectRequestData(
                api_slug="people",
                singular_noun="Person",
                plural_noun="People",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v2/objects/{object}"),
            json=jsonable_encoder({"data": data}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PatchV2ObjectsObjectResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 409:
            raise ConflictError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncObjectsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_objects(self) -> GetV2ObjectsResponse:
        """
        Lists all system-defined and user-defined objects in your workspace.

        Required scopes: `object_configuration:read`.

        ---
        from attio.client import AsyncAttioClient

        client = AsyncAttioClient(
            token="YOUR_TOKEN",
        )
        await client.objects.list_objects()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/objects"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetV2ObjectsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_an_object(self, *, data: PostV2ObjectsRequestData) -> PostV2ObjectsResponse:
        """
        Creates a new custom object in your workspace.

        Required scopes: `object_configuration:read-write`.

        Parameters:
            - data: PostV2ObjectsRequestData.
        ---
        from attio import PostV2ObjectsRequestData
        from attio.client import AsyncAttioClient

        client = AsyncAttioClient(
            token="YOUR_TOKEN",
        )
        await client.objects.create_an_object(
            data=PostV2ObjectsRequestData(
                api_slug="people",
                singular_noun="Person",
                plural_noun="People",
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/objects"),
            json=jsonable_encoder({"data": data}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PostV2ObjectsResponse, _response.json())  # type: ignore
        if _response.status_code == 409:
            raise ConflictError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_an_object(self, object: str) -> GetV2ObjectsObjectResponse:
        """
        Gets a single object by its `object_id` or slug.

        Required scopes: `object_configuration:read`.

        Parameters:
            - object: str.
        ---
        from attio.client import AsyncAttioClient

        client = AsyncAttioClient(
            token="YOUR_TOKEN",
        )
        await client.objects.get_an_object(
            object="people",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v2/objects/{object}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetV2ObjectsObjectResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_an_object(
        self, object: str, *, data: PatchV2ObjectsObjectRequestData
    ) -> PatchV2ObjectsObjectResponse:
        """
        Updates a single object. The object to be updated is identified by its `object_id`.

        Required scopes: `object_configuration:read-write`.

        Parameters:
            - object: str.

            - data: PatchV2ObjectsObjectRequestData.
        ---
        from attio import PatchV2ObjectsObjectRequestData
        from attio.client import AsyncAttioClient

        client = AsyncAttioClient(
            token="YOUR_TOKEN",
        )
        await client.objects.update_an_object(
            object="people",
            data=PatchV2ObjectsObjectRequestData(
                api_slug="people",
                singular_noun="Person",
                plural_noun="People",
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v2/objects/{object}"),
            json=jsonable_encoder({"data": data}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PatchV2ObjectsObjectResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 409:
            raise ConflictError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
