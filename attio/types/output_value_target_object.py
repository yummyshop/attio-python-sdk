# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic as pydantic
import typing_extensions

from ..core.datetime_utils import serialize_datetime


class OutputValueTargetObject(pydantic.BaseModel):
    target_object: str = pydantic.Field(
        description="A slug identifying the object that the referenced record belongs to."
    )
    target_record_id: str = pydantic.Field(description="A UUID to identify the referenced record.")
    attribute_type: typing_extensions.Literal["record-reference"]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        
        json_encoders = {dt.datetime: serialize_datetime}
