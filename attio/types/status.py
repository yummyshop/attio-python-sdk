# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic as pydantic

from ..core.datetime_utils import serialize_datetime
from .status_id import StatusId


class Status(pydantic.BaseModel):
    id: StatusId
    title: str = pydantic.Field(description="The title of the status")
    is_archived: bool = pydantic.Field(
        description="Whether or not to archive the status. See our [archiving guide](/docs/archiving-vs-deleting) for more information on archiving."
    )
    celebration_enabled: bool = pydantic.Field(
        description="Whether arriving at this status triggers a celebration effect in the UI"
    )
    target_time_in_status: typing.Optional[str] = pydantic.Field(
        description="Target time for a record to spend in given status expressed as a ISO-8601 duration string"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
