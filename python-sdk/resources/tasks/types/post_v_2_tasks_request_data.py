# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic as pydantic
import typing_extensions

from ....core.datetime_utils import serialize_datetime
from .post_v_2_tasks_request_data_assignees_item import PostV2TasksRequestDataAssigneesItem
from .post_v_2_tasks_request_data_linked_records_item import PostV2TasksRequestDataLinkedRecordsItem


class PostV2TasksRequestData(pydantic.BaseModel):
    content: str = pydantic.Field(
        description="The text content of the task, in the format specified by the `format` property."
    )
    format: typing_extensions.Literal["plaintext"]
    deadline_at: typing.Optional[str] = pydantic.Field(description="The deadline of the task, in ISO 8601 format.")
    is_completed: bool = pydantic.Field(description="Whether the task has been completed.")
    linked_records: typing.List[PostV2TasksRequestDataLinkedRecordsItem] = pydantic.Field(
        description="Records linked to the task. Creating record links within task content text is not possible via the API at present."
    )
    assignees: typing.List[PostV2TasksRequestDataAssigneesItem] = pydantic.Field(
        description="Workspace members assigned to this task."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
