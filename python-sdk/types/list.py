# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ..core.datetime_utils import serialize_datetime
from .list_created_by_actor import ListCreatedByActor
from .list_id import ListId
from .list_workspace_access import ListWorkspaceAccess
from .list_workspace_member_access_item import ListWorkspaceMemberAccessItem


class List(pydantic.BaseModel):
    id: ListId
    api_slug: str = pydantic.Field(description="A human-readable slug for use in URLs and responses.")
    name: str = pydantic.Field(description="The name of the list, as viewed in the UI.")
    parent_object: typing.List[str] = pydantic.Field(
        description="A UUID or slug to identify the allowed object type for records added to this list. All new Lists are expected to have exactly one parent object. However, some legacy lists may have multiple allowed parents so the return type of this field is an array."
    )
    workspace_access: typing.Optional[ListWorkspaceAccess] = pydantic.Field(
        description="The level of access granted to all members of the workspace for this list. `null` values represent a private list that only grants access to specific workspace members via the `workspace_member_access` property."
    )
    workspace_member_access: typing.List[ListWorkspaceMemberAccessItem] = pydantic.Field(
        description="The level of access granted to specific workspace members for this list. An empty array represents a list that has granted access to no workspace members."
    )
    created_by_actor: ListCreatedByActor = pydantic.Field(description="The actor which created this list.")
    created_at: str = pydantic.Field(description="When the list was created.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
